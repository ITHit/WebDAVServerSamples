<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
  </configSections>
  
  <appSettings>
    <add key="DebugLoggingEnabled" value="true"/>
    <add key="LogPath" value="~/App_Data/WebDav/Logs"/>
    <add key="RepositoryPath" value="~/App_Data/WebDav/Repository" />
    <!-- 
    By default locks and custom properties are stored in Alternate Data Streams (on Windows) or in Extended Attributes (on Linux and Mac),
    together with a file. If ADS/Extended Attributes are not supported, this sample will try to store locks and custom properties in system temp folder.
    To specify a location where the locks and custom properties should be stored uncomment the following attribute and specify the folder path. 
    Every attribute will be stored in a separate file under this folder in this case.
    -->
    <!-- <add key="AttrStoragePath" value="~/App_Data/WebDav/Attributes/" /> -->
    <add key="GoogleServiceAccountID" value=""/>
    <add key="GoogleServicePrivateKey" value=""/>
  </appSettings>
    
  <!--
  It is recommended to run your WebDAV Server in Integrated mode (Available for IIS 7.x and later and IIS Express only). It provides
  improved performance comparing to Classic mode. The Visual Studio ASP.NET Development Server can run in Classic mode only.  
  
  In case of IIS 6 and IIS 5.1, to allow folders with 'bin', 'App_code', 'App_Data', etc names and files with 'web.config' name 
  to be created in your storage, the aspnet_filter.dll mapping must be deleted at server level.
  -->
  <system.web>   
    <httpHandlers>
      
      <!-- 
      As soon as entire website is dedicated to WebDAV and there are no any ASP.NET web pages, services, etc we can remove 
      all handlers here. If you wish to host your WebDAV server and ASP.NET/MVC website on the same virtual host use "Add WebDAV 
      Server Implementation" wizard in your ASP.NET/MVC project or web site context menu.
      -->
      <clear />
      
      <!--       
      This handler processes all WebDAV requests.
      
      This WebDAV config section is used in application pool Classic mode.
      In case of IIS 6 and IIS 5.1 the wildcard map must be configured in IIS.
      -->
      <add verb="*" path="*" type="CardDAVServer.FileSystemStorage.AspNet.DavHandler, CardDAVServer.FileSystemStorage.AspNet" />
    </httpHandlers>
    
    <httpModules>
      
      <!-- As all files are stored in a storage there is no need to verify permissions against Windows ACL using FileAuthorization module. -->
      <remove name="FileAuthorization" />

      <!-- This module creates initial calendar(s) and address book(s) for user during first log-in.-->
      <add name="MyProvisioningModule" type="CardDAVServer.FileSystemStorage.AspNet.Provisioning, CardDAVServer.FileSystemStorage.AspNet" />
    </httpModules>

    <!-- 
    Maximum upload file segment size in Kb, max 2097151 (2Gb) for asp.net.
    
    To allow '&' and '%' in ASP.NET 4.x set the httpRuntime@requestPathInvalidCharacters="". Note that 
    Microsoft Windows Shell (Miniredirector/Web Folders) does not support '%' in WebDAV item names.
    
    To allow trailing dots ('.') in ASP.NET 4.x set httpRuntime@relaxedUrlToFileSystemMapping="true".
    -->
    <httpRuntime executionTimeout="2400" maxRequestLength="2097151" requestPathInvalidCharacters="" relaxedUrlToFileSystemMapping="true" targetFramework="4.5.1" />
    <customErrors mode="Off" />
    <authentication mode="Windows" />
    
    <authorization>
      <!-- 
      To support Windows Shell (Miniredirector/Web Folders) on XP and Server 2003 as well as Firefox CORS requests, OPTIONS must be 
      processed without authentication. To enable authentication of OPTIONS request, remove "allow OPTIONS" from the list below and 
      remove OPTIONS check in AuthenticationModuleBase.App_OnAuthenticateRequest.
      -->
      <allow users="*" verbs="OPTIONS"/>
      <deny users="?"/>
      <allow users="*" />
    </authorization>
    <globalization requestEncoding="utf-8" responseEncoding="utf-8" />
    <compilation targetFramework="4.5.1" debug="true"/>
  </system.web>
  
    <system.webServer>
    <handlers>

      <!-- 
        As soon as this folder is dedicated to WebDAV and there are no any ASP.NET web pages, services, etc we can remove 
        all handlers here.
        -->
      <clear />
      
      <!-- Used only in IIS 7.x and later in Classic mode in 32-bit application if ASP.NET 2.0 pool is used -->
      <add name="aspnet_isapi 32-bit ASP.NET 2.0" path="*" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" resourceType="Unspecified" requireAccess="Script" preCondition="classicMode,runtimeVersionv2.0,bitness32" />

      <!-- Used only in IIS 7.x and later in Classic mode in 64-bit application if ASP.NET 2.0 pool is used -->
      <add name="aspnet_isapi 64-bit ASP.NET 2.0" path="*" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" resourceType="Unspecified" requireAccess="Script" preCondition="classicMode,runtimeVersionv2.0,bitness64" />

      <!-- Used only in IIS 7.x and later in Classic mode in 32-bit application if ASP.NET 4.0 pool is used -->
      <add name="aspnet_isapi 32-bit ASP.NET 4.0" path="*" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" resourceType="Unspecified" requireAccess="Script" preCondition="classicMode,runtimeVersionv4.0,bitness32" />

      <!-- Used only in IIS 7.x and later in Classic mode in 64-bit application if ASP.NET 4.0 pool is used -->
      <add name="aspnet_isapi 64-bit ASP.NET 4.0" path="*" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" resourceType="Unspecified" requireAccess="Script" preCondition="classicMode,runtimeVersionv4.0,bitness64" />

      <!-- Used only in IIS 7.x and later in Integrated mode. In Classic mode system.web\httpHandlers section is used. -->
      <add name="My WebDAV Handler" path="*" verb="*" type="CardDAVServer.FileSystemStorage.AspNet.DavHandler, CardDAVServer.FileSystemStorage.AspNet" preCondition="integratedMode" />
    </handlers>
    <!-- Used only in Integrated mode. In Classic mode system.web\httpModules section is used. -->
    <modules>

      <!-- As all files are stored in a storage there is no need to verify permissions against Windows ACL using FileAuthorization module. -->
      <remove name="FileAuthorization" />

      <!-- This module creates initial calendar(s) and address book(s) for user during first log-in.-->
      <add name="MyProvisioningModule" type="CardDAVServer.FileSystemStorage.AspNet.Provisioning, CardDAVServer.FileSystemStorage.AspNet" preCondition="integratedMode" />      
      
      <!-- Disables Microsoft IIS 7.x and later WebDAV in Integrated mode. It must be disabled for the engine to function properly. -->
      <remove name="WebDAVModule" />
    </modules>
      
    <validation validateIntegratedModeConfiguration="false" />

    <!-- Used in both Integrated and Classic mode -->
    <security>
      <!-- 
      As all files are stored in a storage there is no need in additional protection.
      
      * To allow '+' in item names the allowDoubleEscaping attribute is set to 'true'.
      * To allow '&' and '%' in ASP.NET 2.0, IIS 7.x and later the "VerificationCompatibility"= dword:00000001 must be set under the 
        key: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ASP.NET
      * To allow '&' and '%' in ASP.NET 4.x set the configuration\system.web\httpRuntime@requestPathInvalidCharacters="".
      * To allow trailing dots ('.') in ASP.NET 4.x set httpRuntime@relaxedUrlToFileSystemMapping="true".
      Note that Microsoft Windows Shell (Miniredirector/Web Folders) does not support '%' in WebDAV item names.
      -->
      <requestFiltering allowDoubleEscaping="true">

        <!-- Allow all files with 'web.config' name. -->
        <fileExtensions>
          <clear />
        </fileExtensions>

        <!-- Allow all folders with 'bin', 'App_code', 'App_Data', etc names. -->				
        <hiddenSegments>
          <clear />
        </hiddenSegments>

        <!-- Maximum upload file segment size in bytes is 2147483648 (2Gb) for IIS 7.x and later / asp.net. -->
        <requestLimits maxAllowedContentLength="2147483648"/>
      </requestFiltering>
    </security>
  </system.webServer>
</configuration>